networks:
  kafka-net:
    driver: bridge

volumes:
  database_data:
  broker-data:

services:


  test-api:
    build:
      context: api
      dockerfile: Dockerfile
    env_file:
      - .dev.env
    volumes:
      - ./api/app:/usr/src/api/app
    ports:
      - 8000:8000
    networks:
      - kafka-net

  db-appender:
    build:
      context: db_appender
      dockerfile: Dockerfile
    env_file:
      - .dev.env
    volumes:
      - ./db_appender/app:/usr/src/appender/app
    networks:
      - kafka-net
    depends_on:
      kafka1:
        condition: service_healthy

  db:
    image: postgres
    environment:
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=loggingDB
    ports:
      - 5432:5432
    volumes:
      - database_data:/var/lib/postgresql/data
    networks:
      - kafka-net

  s3-appender:
    build:
      context: s3_appender
      dockerfile: Dockerfile
    env_file:
      - .dev.env
    volumes:
      - ./s3_appender/app:/usr/src/appender/app
    networks:
      - kafka-net
    depends_on:
      kafka1:
        condition: service_healthy

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-cluster-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092
    depends_on:
      - kafka1
    networks:
      - kafka-net

  kafka1:
    image: confluentinc/cp-kafka:7.8.0
    hostname: kafka1
    container_name: kafka1
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_BROKER_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka1:9092,CONTROLLER://kafka1:9093'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka1:9092'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      CLUSTER_ID: 'EmptNWtoR4GGWx-BH6nGLQ'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_NUM_PARTITIONS: 3
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka1:9092 --list | grep -q '^logs$'" ]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - broker-data:/var/lib/kafka/data
    networks:
      - kafka-net

  topic-init:
    image: confluentinc/cp-kafka:7.8.0
    depends_on:
      - kafka1
    entrypoint: [ "/bin/sh", "-c" ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka1:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka1:9092 --create --if-not-exists --topic logs --replication-factor 1 --partitions 4

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka1:9092 --list
      "
    networks:
      - kafka-net